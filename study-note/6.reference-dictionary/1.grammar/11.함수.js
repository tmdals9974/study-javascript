//! 함수 선언 ================================================================

// * 함수정의문
function myFn(x) {
  return x;
}

// * 함수표현식 (세미콜론 필수)
const myFn2 = function (x) {
  return x;
};

// * 즉시실행함수
(function () {
  console.log("일회성 함수 실행");
})();


//! 가변인자 ================================================================

//일반적인 함수 사용. 매개변수를 매번 선언해줘야한다.
function sum1(a, b, c) {
  return a + b + c;
}
sum1(10, 20, 30);

//가변인자 사용. 코드를 뜯어보지않으면 어떻게 작동하는지 알 수 없다.
function sum2() {
  let s = 0;

  for (let i = 0; i < arguments.length; i++) {
    s = s + arguments[i];
  }

  return s;
}
sum2(10, 20, 30, 40, 50);

// 전개 파라미터 이용
function sum3(a, b, ...args) {
  //args는 없을 수도 있음
  let s = 0;

  for (let i = 0; i < args.length; i++) {
    s = s + args[i];
  }

  return s;
}
sum3(10, 20, 30, 40, 50);


//! 호출방법 ================================================================

myFn2();
sum3.call(null, 10, 20, 30); //context를 넘기는 것 외에 일반적인 호출과 동일
sum3.apply(null, [10, 20, 30]); //매개변수를 배열로 넘길 수 있기에 데이터를 이용해 보낼 수 있음.


//! 화살표 함수 ================================================================

//아래와 같이 사용 시,  일반함수와 거의 유사함 (context나 prototype 등이 다르지만 이후 다룰 예정)
const sumArrow = (a, b, ...args) => {
  let s = 0;

  for (let i = 0; i < args.length; i++) {
    s = s + args[i];
  }

  return s;
}

//아래와 같이 한줄 함수로도 사용 가능 (바로 return일 경우 {}, return 생략 가능) (인자가 1개일 경우 () 생략 가능)
const ten = x => 100 + x;


//! 생성기 함수 (generator) ================================================================


/*
function 뒤에 asterisk (*) 를 붙임
통상적인 함수의 작동 방식과 전혀 다름.

최초에 호출하면 함수를 실행 준비 상태로 만듬.
이후 함수를 실행할 도구를 담은 객체를 반환.

도구를 이용해 함수를 실행/정지 반복 가능.
*/

function* gen() {
  yield 10;
  yield 20;
  return 30;
}

//g에는 gen 함수를 컨트롤할 객체가 들어감. 객체에는 next라는 메소드가 포함되어 있음.
//next를 이용해 gen에게 변수 전달 / 반환값 받을 수 있음
const g = gen();

g.next(); //10
g.next(); //20
g.next(); //30

//사용자와 커뮤니케이션이 가능한 특이한 형태


//! 비동기 함수 ================================================================


async function myTask() {
  //async를 이용해 비동기 사용 가능. 이후 await, promise, callback 등을 배운 후 다시 설명 예정.
}